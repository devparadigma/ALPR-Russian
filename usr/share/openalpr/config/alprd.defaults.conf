
[daemon]

; unique company id.  Created for you when registering with OpenALPR Cloud
company_id = 

; country determines the training dataset used for recognizing plates.  
; Valid values can be found in /usr/share/openalpr/runtime_data/config
country = us

; Declare each stream on a separate line.
; each unique stream should be defined as stream = [url]

; Example stream config:
; Steams should be configured as a unique .conf file in the /etc/openalpr/stream.d/ directory
; Each stream.conf connects to a single camera.  It must contain the following variable:
;   stream = http://127.0.0.1/example_video_stream.mjpeg
; It may also contain:
;  prewarp = [Prewarp calibration value]
;  detection_mask_image = [path to black/white mask image]


; topn is the number of possible plate character variations to report
topn = 10

; Applies a pattern against the results to improve accuracy.  Patterns are located in 
; runtime_data/postprocess/[country].patterns. For example using a value of la would compare 
; against the Louisiana license plate templates (letter-letter-letter-number-number-number)
; OpenALPR state recognition in the USA is highly accurate and will auto-detect the state if this value is left unchanged
pattern = 

; Plate grouping looks for similar plates during the same time period
plate_groups_enabled = 1

; The maximum time between matching plate reads
plate_groups_time_delta_ms = 1800

; Form a group after at least this many similar plates are seen
plate_groups_min_plates_to_group = 2

; Ignore plates (for the purposes of grouping) with a lower confidence
plate_groups_min_confidence = 80.0

; Stop a single group at this number to avoid memory explosion
plate_groups_max_plates_to_group = 2500

; Send a preview group result before the vehicle has left the scene.  This is useful for 
; real-time use-cases such as access control
plate_group_enable_preview = 0

; The number of plate reads before sending a preview.  A higher number leads to more accurate results on 
; previews but adds delay
plate_group_preview_min_reads = 5

; Combine all reads from all cameras on this agent to one group.
; This is useful when the cameras are viewing the same vehicles at the same time
plate_groups_span_cameras = 0

; Parked car detection filters group entries for sequential plate results that have not moved
; These parameters control the sensitivity used for detecting these situations
parked_car_detection_enabled = 1

; How long to wait between subsequent recognitions before forgetting about the parked car
parked_car_max_delta_ms = 180000

; How close from the previous location (as a percentage of the plate size) must the plate be to 
; consider it parked
parked_car_max_distance_multiplier = 1.2

; How many character differences between plates will we allow to consider the plate the same
parked_car_max_text_distance = 1

; Motion stickiness determines how long the motion detection lingers on a particular area 
; where motion has recently been detected.  When vehicles wait at a stop sign, 
; high stickiness would be best, so that the plate continues to read while the vehicle is not moving. 
; If capturing on a fast-moving highway, low stickiness would be better.
; Values should be specified between 0 (low stickiness) and 100 (high stickiness)
motion_stickiness = 60.0

; Determines whether images that contain plates should be stored to disk
store_plates = 1

; JPEG image quality (between 1 and 100).  Filesize increases exponentially as quality approaches 100
store_plates_jpeg_quality = 85

; The location on disk to store the plate images
store_plates_location = C:\OpenALPR\Agent\plateimages

; Store one image per vehicle, do not retain images for individual plate reads
store_only_group_images = 1

; The maximum size allowed for plate images.  Older plates will be automatically deleted to save new plates.
store_plates_maxsize_mb = 8000

; Whether or not to store h264 video clips to the local filesystem.  Storing video provides light NVR 
; functionality within the OpenALPR web interface.  The video stream must be configured for rtsp over h264 
store_video = 0

; Location used to store video clips in a rolling database
store_video_location = C:\OpenALPR\Agent\videoclips

; Maximum disk space used to store video data.  Older video clips will be automatically deleted to make 
; room for new video clips.
store_video_maxsize_gb = 20

; Whether or not to upload data.  If disabled, results will queue on the local beanstalkd queue
upload_data = 0

; The destination URL where OpenALPR will post data
upload_address = https://cloud.openalpr.com/push/

; Concurrent threads used for uploading.  Higher threads help push data over high latency connections.
upload_threads = 6

; Whether to upload plate group data
upload_groups = 1

; Whether to upload individual plate reads
upload_single_plates = 0

; Save to another beanstalkd tube.  Useful for integrating with other software 
; while still using the ALPR service to upload.  
; If enabled, your process must drain the queue otherwise results will build up in memory
upload_write_second_tube = 0

; Specifies the second beanstalkd tube name to write to
upload_write_second_tube_name = alprd-alt

; Specifies whether to upload the data on the second queue or leave it on the beanstalkd tube
upload_second_tube_post_enabled = 0

; Specifies destination address to post second tube data when enabled
upload_second_tube_post_url = http://localhost/

; When uploads are delayed (e.g., due to an internet outage) how long should plates be considered valid 
; before dropping them.  By default (-1), plates will never be dropped.  For more real-time use cases, old plates may 
; not be useful and sending a large backlog after being offline may not be useful
upload_oldest_plate_seconds = -1

; Whether to use beanstalkd (external process) to queue results or an in-memory process
; For Windows systems, it's recommended to use in-memory for best stability
use_beanstalkd = 0

; Websockets enable secure agent management and on-demand image transfers
websockets_enabled = 1

; Use motion detection to ignore non-moving regions.  Increases speed and efficiency
motion_detection = 1

; Number of CPU cores allowed to be used for ALPR processing
analysis_threads = half

; Priority of analysis threads.  Must be -1, 0, or 1
; -1 allows other processes CPU priority over OpenALPR processing.  0 is normal procesing, 1 is high priority
; Recommended value is -1
analysis_priority = -1

; This webservice provides plate images on request.  
web_server_enabled = 0

; Show debug information in the local webservice.  This is useful during development but should be 
; disabled in production
web_server_debug = 0

; Address used to bind the webservice.  Set this to a value of 127.0.0.1 to not allow any remote connections
web_service_bind_address = 0.0.0.0

; Port used to host the OpenALPR daemon web service.  
web_server_port = 8355

; Enable/disable make/model/color/bodytype detection for each plate group
classify_vehicles = 1

; User data is an arbitrary string value that is sent in the payload with every result for this agent
user_data =

; Filter log messages based on their severity.  Options are DEBUG, INFO, WARN, ERROR
log_level = DEBUG

; Number of frames to buffer in memory.  
camera_buffer_size = 10

; Enables serialization of the JPEG plate crop in the JSON data
serialize_jpeg_crop = 1

; Specify a maximum input rate for video streams.  Use a value of -1 for unlimited.
; This helps reduce the processing overhead if there are insufficient CPU resources to 
; process the full framerate.  Note, OpenALPR still must decode the H264 stream at full 
; framerate, but the frames are dropped after that.  If possible, it is better to reduce 
; the framerate being pulled from the camera
max_fps = -1


; GPS latitude/longitude values can either be a fixed position (i.e., a numeric value)
; or can be set to "auto" to attempt to get the value from a USB GPS device
; gps_latitude = 0.0
; gps_longitude = 0.0

; Alternatively, you may use the local webservice to set the GPS coordinates at runtime.
; Set this value to 1 to enable
; This is useful for a mobile application where the GPS coordinates change
; Send an HTTP GET request to the local webservice (default port 8355) in the following format:
; http://localhost:8355/gps/set?latitude=-77.0365&longitude=38.8977
; gps_use_webservice = 0

; Configure CPU or Nvidia GPU acceleration.  Values are:
; -1 = Use value from openalpr.conf
; 0 = CPU
; 1 = Nvidia GPU
hardware_acceleration = -1

; If using Nvidia GPU acceleration, assign the GPU ID used for processing (default is 0)
; Multiple GPUs can be used by separating the IDs with a comma (e.g., 0,1,2 would use three GPUs with those IDs)
; Batch size configures how many images to process in parallel
gpu_id = 0
gpu_batch_size = 5


; Generate debug output in the event of a crash (Linux only)
; If set to 1, the software automatically uploads crash information to OpenALPR's servers to help us improve the software
core_dumps = 0

; The maximum uptime can be configured to force the agent to restart after a period of time.  Upon exiting the system
; will restart the service automatically.  On Linux the default behavior is to never restart (-1).  On Windows,
; the default is a restart every week
max_uptime_seconds = -1
